const questions = [
    // 1. Mathematics
    { id: 1, title: "Sum of Two Numbers", description: "Write a program that takes two integers as input and prints their sum.", category: "Mathematics", difficulty: "Easy", 
        exampleInput: "1\n2 10\n",
        exampleOutput: "12\n",
        submitInput: "1\n2 10\n",
        submitOutput: "12\n",
        explanation: "The sum of 5 and 3 is 8." },
    { id: 2, title: "Prime Number Check", description: "Determine if a given number is prime.", category: "Mathematics", difficulty: "Easy", exampleInput: "7", exampleOutput: "true", explanation: "7 is a prime number." },
    { id: 3, title: "Greatest Common Divisor", description: "Find the GCD of two numbers.", category: "Mathematics", difficulty: "Medium", exampleInput: "8 12", exampleOutput: "4", explanation: "The GCD of 8 and 12 is 4." },
    { id: 4, title: "Least Common Multiple", description: "Find the LCM of two numbers.", category: "Mathematics", difficulty: "Medium", exampleInput: "6 9", exampleOutput: "18", explanation: "The LCM of 6 and 9 is 18." },
    {id: 5,
    title: "Factorial of a Number",
    description: "Compute the factorial of a given number.",
    category: "Mathematics",
    difficulty: "Medium",
    exampleInput: "1\n5\n",
    exampleOutput: "120\n",
    submitInput: "3\n4\n6\n7\n",
    submitOutput: "6\n24\n720\n5040\n",
    description: "Factorial of 5 is calculated as 5! = 5 × 4 × 3 × 2 × 1 = 120." },{ id: 6, title: "Fibonacci Sequence", description: "Generate the nth Fibonacci number.", category: "Mathematics", difficulty: "Medium", exampleInput: "6", exampleOutput: "8", explanation: "The 6th Fibonacci number is 8." },
    {
        id: 7,
        title: "Power of a Number",
        description: "Compute a^b using efficient exponentiation.",
        category: "Mathematics",
        difficulty: "Hard",
        exampleInput: "1\n2 10\n",
        exampleOutput: "1024\n",
        submitInput: "1\n2 10\n",
        submitOutput: "1024\n",
        explanation: "2^10 = 1024."
    },    { id: 8, title: "Sum of Digits", description: "Find the sum of digits of a given number.", category: "Mathematics", difficulty: "Easy", exampleInput: "123", exampleOutput: "6", explanation: "The sum of digits of 123 is 1 + 2 + 3 = 6." },
    { id: 9, title: "Check for Armstrong Number", description: "Determine if a number is an Armstrong number.", category: "Mathematics", difficulty: "Hard", exampleInput: "153", exampleOutput: "true", explanation: "153 is an Armstrong number (1^3 + 5^3 + 3^3 = 153)." },
    { id: 10, title: "Sieve of Eratosthenes", description: "Find all prime numbers up to N using the Sieve of Eratosthenes.", category: "Mathematics", difficulty: "Hard", exampleInput: "10", exampleOutput: "[2, 3, 5, 7]", explanation: "The prime numbers up to 10 are 2, 3, 5, and 7." },

    // 2. Strings
    { id: 11, title: "Reverse a String", description: "Given a string, return its reverse.", category: "Strings", difficulty: "Medium", exampleInput: "hello", exampleOutput: "olleh", explanation: "The input string 'hello' is reversed to 'olleh'." },
    { id: 12, title: "Check for Palindrome", description: "Check if a given string is a palindrome.", category: "Strings", difficulty: "Easy", exampleInput: "madam", exampleOutput: "true", explanation: "'madam' is a palindrome." },
    { id: 13, title: "Find First Non-Repeating Character", description: "Find the first non-repeating character in a string.", category: "Strings", difficulty: "Medium", exampleInput: "swiss", exampleOutput: "w", explanation: "'w' is the first non-repeating character." },
    { id: 14, title: "Longest Common Prefix", description: "Find the longest common prefix among an array of strings.", category: "Strings", difficulty: "Medium", exampleInput: "[\"flower\",\"flow\",\"flight\"]", exampleOutput: "\"fl\"", explanation: "The longest common prefix is 'fl'." },
    { id: 15, title: "Check for Anagram", description: "Check if two strings are anagrams of each other.", category: "Strings", difficulty: "Easy", exampleInput: "listen silent", exampleOutput: "true", explanation: "Both words contain the same letters." },
    { id: 16, title: "String Compression", description: "Perform basic string compression using the counts of repeated characters.", category: "Strings", difficulty: "Medium", exampleInput: "aabcccccaaa", exampleOutput: "a2b1c5a3", explanation: "Compresses to 'a2b1c5a3'." },
    { id: 17, title: "Find All Permutations of a String", description: "Generate all permutations of a given string.", category: "Strings", difficulty: "Hard", exampleInput: "abc", exampleOutput: "[\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]", explanation: "All possible permutations." },
    { id: 18, title: "Longest Palindromic Substring", description: "Find the longest palindromic substring in a given string.", category: "Strings", difficulty: "Hard", exampleInput: "babad", exampleOutput: "bab", explanation: "The longest palindrome is 'bab'." },
    { id: 19, title: "Valid Parentheses", description: "Check if a string contains valid parentheses.", category: "Strings", difficulty: "Medium", exampleInput: "()[]{}", exampleOutput: "true", explanation: "All brackets are correctly closed." },
    { id: 20, title: "Count and Say", description: "Generate the nth term of the 'Count and Say' sequence.", category: "Strings", difficulty: "Hard", exampleInput: "4", exampleOutput: "1211", explanation: "The 4th term in the sequence is '1211'." },
    {
        id: 21,
        title: "Find the Maximum Element",
        description: "Find the maximum element in an array.",
        category: "Arrays",
        difficulty: "Easy",
        exampleInput: "[1, 3, 5, 2, 4]",
        exampleOutput: "5",
        explanation: "The maximum element is 5.",
    },
    {
        id: 22,
        title: "Find the Second Largest Element",
        description: "Find the second largest element in an array.",
        category: "Arrays",
        difficulty: "Easy",
        exampleInput: "[1, 3, 5, 2, 4]",
        exampleOutput: "4",
        explanation: "The second largest element is 4.",
    },
    {
        id: 23,
        title: "Check if Array is Sorted",
        description: "Determine if an array is sorted in non-decreasing order.",
        category: "Arrays",
        difficulty: "Easy",
        exampleInput: "[1, 2, 3, 4, 5]",
        exampleOutput: "true",
        explanation: "The array is sorted.",
    },
    {
        id: 24,
        title: "Move All Zeros to End",
        description: "Move all zeros in an array to the end while maintaining order.",
        category: "Arrays",
        difficulty: "Medium",
        exampleInput: "[0, 1, 0, 3, 12]",
        exampleOutput: "[1, 3, 12, 0, 0]",
        explanation: "All zeros are moved to the end.",
    },
    {
        id: 25,
        title: "Find Missing Number",
        description: "Find the missing number in an array of size n-1 containing numbers from 1 to n.",
        category: "Arrays",
        difficulty: "Medium",
        exampleInput: "[1, 2, 4, 5, 6]",
        exampleOutput: "3",
        explanation: "The missing number is 3.",
    },
    {
        id: 26,
        title: "Find Duplicates in Array",
        description: "Find duplicates in an array containing numbers from 1 to n.",
        category: "Arrays",
        difficulty: "Medium",
        exampleInput: "[1, 3, 2, 3, 4]",
        exampleOutput: "[3]",
        explanation: "3 appears twice in the array.",
    },
    {
        id: 27,
        title: "Find Intersection of Two Arrays",
        description: "Find the intersection of two arrays.",
        category: "Arrays",
        difficulty: "Medium",
        exampleInput: "[1, 2, 3, 4] [3, 4, 5, 6]",
        exampleOutput: "[3, 4]",
        explanation: "Elements 3 and 4 are present in both arrays.",
    },
    {
        id: 28,
        title: "Maximum Subarray Sum",
        description: "Find the maximum sum of a contiguous subarray.",
        category: "Arrays",
        difficulty: "Hard",
        exampleInput: "[-2, 1, -3, 4, -1, 2, 1, -5, 4]",
        exampleOutput: "6",
        explanation: "The maximum sum subarray is [4, -1, 2, 1] with sum 6.",
    },
    {
        id: 29,
        title: "Trapping Rain Water",
        description: "Find the maximum water that can be trapped.",
        category: "Arrays",
        difficulty: "Hard",
        exampleInput: "[0,1,0,2,1,0,1,3,2,1,2,1]",
        exampleOutput: "6",
        explanation: "Total trapped water is 6 units.",
    },
    {
        id: 30,
        title: "Merge Intervals",
        description: "Merge overlapping intervals in an array.",
        category: "Arrays",
        difficulty: "Hard",
        exampleInput: "[[1,3],[2,6],[8,10],[15,18]]",
        exampleOutput: "[[1,6],[8,10],[15,18]]",
        explanation: "Intervals [1,3] and [2,6] are merged into [1,6].",
    },
    {
        id: 31,
        title: "N-Queens Problem",
        description: "Solve the N-Queens problem where N queens must be placed on an NxN chessboard such that no two queens attack each other.",
        category: "Recursion & Backtracking",
        difficulty: "Medium",
        exampleInput: "4",
        exampleOutput: "[['.Q..','...Q','Q...','..Q.'],['..Q.','Q...','...Q','.Q..']]",
        explanation: "Two valid solutions exist for N=4."
    },
    {
        id: 32,
        title: "Sudoku Solver",
        description: "Solve a given partially filled 9x9 Sudoku board.",
        category: "Recursion & Backtracking",
        difficulty: "Medium",
        exampleInput: "[[5,3,0,0,7,0,0,0,0],...]",
        exampleOutput: "[[5,3,4,6,7,8,9,1,2],...]",
        explanation: "The empty cells in the board are filled according to Sudoku rules."
    },
    {
        id: 33,
        title: "Word Break Problem",
        description: "Check if a given string can be segmented into valid dictionary words using recursion and backtracking.",
        category: "Recursion & Backtracking",
        difficulty: "Hard",
        exampleInput: "'applepenapple'\n['apple', 'pen']",
        exampleOutput: "true",
        explanation: "'applepenapple' can be segmented as 'apple pen apple'."
    },
    {
        id: 34,
        title: "Rat in a Maze",
        description: "Find all possible paths for a rat from the top-left to the bottom-right of a maze with obstacles.",
        category: "Recursion & Backtracking",
        difficulty: "Hard",
        exampleInput: "[[1, 0, 0, 0], [1, 1, 0, 1], [0, 1, 0, 0], [1, 1, 1, 1]]",
        exampleOutput: "['DDRDRR', 'DRDDRR']",
        explanation: "Two paths exist to reach the destination."
    },
    {
        id: 35,
        title: "Generate All Possible Parentheses",
        description: "Generate all valid parentheses combinations for a given number of pairs.",
        category: "Recursion & Backtracking",
        difficulty: "Hard",
        exampleInput: "3",
        exampleOutput: "['((()))', '(()())', '(())()', '()(())', '()()()']",
        explanation: "All valid combinations of 3 pairs of parentheses are generated."
    },
    {
        id: 36,
        title: "Permutations of an Array",
        description: "Generate all possible permutations of an array of distinct numbers.",
        category: "Recursion & Backtracking",
        difficulty: "Medium",
        exampleInput: "[1,2,3]",
        exampleOutput: "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        explanation: "All possible orderings of the array are listed."
    },
    {
        id: 37,
        title: "Combinations of Numbers",
        description: "Find all combinations of numbers that sum up to a given target.",
        category: "Recursion & Backtracking",
        difficulty: "Medium",
        exampleInput: "[2,3,6,7], target=7",
        exampleOutput: "[[2,2,3],[7]]",
        explanation: "Numbers can be used multiple times to reach the target."
    },
    {
        id: 38,
        title: "Letter Combinations of a Phone Number",
        description: "Generate all possible letter combinations from a given phone number's digit sequence.",
        category: "Recursion & Backtracking",
        difficulty: "Medium",
        exampleInput: "'23'",
        exampleOutput: "['ad','ae','af','bd','be','bf','cd','ce','cf']",
        explanation: "Each digit maps to a set of letters on a phone keypad."
    },
    {
        id: 39,
        title: "Subsets of an Array",
        description: "Generate all possible subsets (the power set) of a given array.",
        category: "Recursion & Backtracking",
        difficulty: "Medium",
        exampleInput: "[1,2,3]",
        exampleOutput: "[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        explanation: "All subsets, including the empty set and the full array, are listed."
    },
    {
        id: 40,
        title: "Bubble Sort",
        description: "Implement the Bubble Sort algorithm to sort an array in ascending order.",
        category: "Sorting & Searching",
        difficulty: "Easy",
        exampleInput: "[5, 3, 8, 4, 2]",
        exampleOutput: "[2, 3, 4, 5, 8]",
        explanation: "Repeatedly swap adjacent elements if they are in the wrong order."
    },
    {
        id: 41,
        title: "Insertion Sort",
        description: "Implement the Insertion Sort algorithm to sort an array in ascending order.",
        category: "Sorting & Searching",
        difficulty: "Easy",
        exampleInput: "[5, 3, 8, 4, 2]",
        exampleOutput: "[2, 3, 4, 5, 8]",
        explanation: "Elements are inserted in the correct position one at a time."
    },
    {
        id: 42,
        title: "Selection Sort",
        description: "Implement the Selection Sort algorithm to sort an array in ascending order.",
        category: "Sorting & Searching",
        difficulty: "Easy",
        exampleInput: "[5, 3, 8, 4, 2]",
        exampleOutput: "[2, 3, 4, 5, 8]",
        explanation: "Find the smallest element and swap it with the current element."
    },
    {
        id: 43,
        title: "Binary Search",
        description: "Implement Binary Search to find an element in a sorted array.",
        category: "Sorting & Searching",
        difficulty: "Easy",
        exampleInput: "[1, 2, 3, 4, 5], target=3",
        exampleOutput: "2",
        explanation: "Binary search finds the element in logarithmic time."
    },
    {
        id: 44,
        title: "Merge Sort",
        description: "Implement Merge Sort to sort an array in ascending order.",
        category: "Sorting & Searching",
        difficulty: "Medium",
        exampleInput: "[5, 3, 8, 4, 2]",
        exampleOutput: "[2, 3, 4, 5, 8]",
        explanation: "Recursively divide the array and merge sorted parts."
    },
    {
        id: 45,
        title: "Quick Sort",
        description: "Implement Quick Sort to sort an array in ascending order.",
        category: "Sorting & Searching",
        difficulty: "Medium",
        exampleInput: "[5, 3, 8, 4, 2]",
        exampleOutput: "[2, 3, 4, 5, 8]",
        explanation: "Choose a pivot and partition elements around it."
    },
    {
        id: 46,
        title: "Find First and Last Occurrence",
        description: "Find the first and last position of a target element in a sorted array.",
        category: "Sorting & Searching",
        difficulty: "Medium",
        exampleInput: "[5, 7, 7, 8, 8, 10], target=8",
        exampleOutput: "[3, 4]",
        explanation: "Use binary search to find both positions."
    },
    {
        id: 47,
        title: "Search in Rotated Sorted Array",
        description: "Find a target in a rotated sorted array.",
        category: "Sorting & Searching",
        difficulty: "Hard",
        exampleInput: "[4,5,6,7,0,1,2], target=0",
        exampleOutput: "4",
        explanation: "Use binary search with modifications."
    },
    {
        id: 48,
        title: "Kth Smallest Element in an Array",
        description: "Find the kth smallest element in an unsorted array.",
        category: "Sorting & Searching",
        difficulty: "Hard",
        exampleInput: "[7,10,4,3,20,15], k=3",
        exampleOutput: "7",
        explanation: "Use a min-heap or QuickSelect."
    },
    {
        id: 49,
        title: "Median of Two Sorted Arrays",
        description: "Find the median of two sorted arrays.",
        category: "Sorting & Searching",
        difficulty: "Hard",
        exampleInput: "[1,3], [2]",
        exampleOutput: "2.0",
        explanation: "Use binary search to find the median."
    },
    {
        id: 50,
        title: "Reverse a Linked List",
        description: "Reverse a singly linked list iteratively and recursively.",
        category: "Linked Lists",
        difficulty: "Easy",
        exampleInput: "[1->2->3->4->5]",
        exampleOutput: "[5->4->3->2->1]",
        explanation: "Reverse pointers between nodes."
    },
    {
        id: 51,
        title: "Find the Middle of a Linked List",
        description: "Find the middle node of a linked list.",
        category: "Linked Lists",
        difficulty: "Easy",
        exampleInput: "[1->2->3->4->5]",
        exampleOutput: "3",
        explanation: "Use the slow and fast pointer approach."
    },
    {
        id: 52,
        title: "Detect a Loop in a Linked List",
        description: "Check if a linked list has a cycle.",
        category: "Linked Lists",
        difficulty: "Medium",
        exampleInput: "[1->2->3->4->5->2]",
        exampleOutput: "true",
        explanation: "Use Floyd’s cycle-finding algorithm."
    },
    {
        id: 53,
        title: "Remove Duplicates from a Sorted Linked List",
        description: "Remove duplicate values from a sorted linked list.",
        category: "Linked Lists",
        difficulty: "Medium",
        exampleInput: "[1->1->2->3->3]",
        exampleOutput: "[1->2->3]",
        explanation: "Traverse and remove duplicates."
    },
    {
        id: 54,
        title: "Merge Two Sorted Linked Lists",
        description: "Merge two sorted linked lists into one sorted list.",
        category: "Linked Lists",
        difficulty: "Medium",
        exampleInput: "[1->3->5], [2->4->6]",
        exampleOutput: "[1->2->3->4->5->6]",
        explanation: "Use a two-pointer approach."
    },
    {
        id: 55,
        title: "Add Two Numbers Represented as Linked Lists",
        description: "Add two numbers where digits are stored in linked lists.",
        category: "Linked Lists",
        difficulty: "Medium",
        exampleInput: "[2->4->3], [5->6->4]",
        exampleOutput: "[7->0->8]",
        explanation: "Simulate column-wise addition."
    },
    {
        id: 56,
        title: "Find the Intersection Point of Two Linked Lists",
        description: "Find where two linked lists intersect.",
        category: "Linked Lists",
        difficulty: "Hard",
        exampleInput: "[4->1->8->4->5], [5->6->1->8->4->5]",
        exampleOutput: "8",
        explanation: "Use two-pointer technique."
    },
    {
        id: 57,
        title: "Reverse Nodes in k-Group",
        description: "Reverse nodes in k-sized groups.",
        category: "Linked Lists",
        difficulty: "Hard",
        exampleInput: "[1->2->3->4->5], k=2",
        exampleOutput: "[2->1->4->3->5]",
        explanation: "Reverse nodes in groups of k."
    },
    {
        id: 58,
        title: "Clone a Linked List with Random Pointers",
        description: "Clone a linked list where each node has a random pointer.",
        category: "Linked Lists",
        difficulty: "Hard",
        exampleInput: "[1->2->3->4->5]",
        exampleOutput: "[1->2->3->4->5] (new list)",
        explanation: "Use a hashmap to copy nodes."
    },
    {
        id: 59,
        title: "LRU Cache Implementation",
        description: "Implement an LRU cache using a linked list and hashmap.",
        category: "Linked Lists",
        difficulty: "Hard",
        exampleInput: "Capacity = 2, Put(1,1), Put(2,2), Get(1), Put(3,3), Get(2)",
        exampleOutput: "[1, -1]",
        explanation: "Use a hashmap and doubly linked list."
    }
,{
    id: 60,
    title: "Implement Stack Using Arrays",
    description: "Implement a stack using an array with push, pop, and top operations.",
    category: "Stacks & Queues",
    difficulty: "Easy",
    exampleInput: "Push(1), Push(2), Pop(), Top()",
    exampleOutput: "2",
    explanation: "Use an array to store elements and manage top index."
},
{
    id: 61,
    title: "Implement Queue Using Arrays",
    description: "Implement a queue using an array with enqueue and dequeue operations.",
    category: "Stacks & Queues",
    difficulty: "Easy",
    exampleInput: "Enqueue(1), Enqueue(2), Dequeue(), Front()",
    exampleOutput: "1",
    explanation: "Use an array and maintain front and rear pointers."
},
{
    id: 62,
    title: "Balanced Parentheses",
    description: "Check if the given expression has balanced parentheses.",
    category: "Stacks & Queues",
    difficulty: "Easy",
    exampleInput: "{[()]}",
    exampleOutput: "true",
    explanation: "Use a stack to check for matching brackets."
},
{
    id: 63,
    title: "Next Greater Element",
    description: "Find the next greater element for each element in an array.",
    category: "Stacks & Queues",
    difficulty: "Medium",
    exampleInput: "[4, 5, 2, 25]",
    exampleOutput: "[5, 25, 25, -1]",
    explanation: "Use a stack to find the next greater element efficiently."
},
{
    id: 64,
    title: "Implement Stack Using Queues",
    description: "Implement a stack using two queues.",
    category: "Stacks & Queues",
    difficulty: "Medium",
    exampleInput: "Push(1), Push(2), Pop(), Top()",
    exampleOutput: "2",
    explanation: "Use two queues to simulate stack operations."
},
{
    id: 65,
    title: "LRU Cache Implementation",
    description: "Design an LRU Cache with get and put operations.",
    category: "Stacks & Queues",
    difficulty: "Medium",
    exampleInput: "Capacity=2, Put(1,1), Put(2,2), Get(1), Put(3,3), Get(2)",
    exampleOutput: "[1, -1]",
    explanation: "Use a hashmap and doubly linked list."
},
{
    id: 66,
    title: "Implement Min Stack",
    description: "Implement a stack that supports retrieving the minimum element in O(1) time.",
    category: "Stacks & Queues",
    difficulty: "Medium",
    exampleInput: "Push(3), Push(5), GetMin(), Push(2), GetMin()",
    exampleOutput: "[3, 2]",
    explanation: "Use an auxiliary stack to track the minimum."
},
{
    id: 67,
    title: "Sliding Window Maximum",
    description: "Find the maximum in every window of size k in an array.",
    category: "Stacks & Queues",
    difficulty: "Hard",
    exampleInput: "[1,3,-1,-3,5,3,6,7], k=3",
    exampleOutput: "[3, 3, 5, 5, 6, 7]",
    explanation: "Use a deque to efficiently find max in each window."
},
{
    id: 68,
    title: "Largest Rectangle in Histogram",
    description: "Find the largest rectangle area in a histogram.",
    category: "Stacks & Queues",
    difficulty: "Hard",
    exampleInput: "[2,1,5,6,2,3]",
    exampleOutput: "10",
    explanation: "Use a stack to track rectangle heights efficiently."
},
{
    id: 69,
    title: "Expression Evaluation Using Stack",
    description: "Evaluate an arithmetic expression with +, -, *, / using a stack.",
    category: "Stacks & Queues",
    difficulty: "Hard",
    exampleInput: "3 + 5 * 2",
    exampleOutput: "13",
    explanation: "Use two stacks: one for numbers and one for operators."
}
,
{
    id: 70,
    title: "Preorder, Inorder, and Postorder Traversal",
    description: "Implement recursive and iterative tree traversal methods.",
    category: "Trees",
    difficulty: "Easy",
    exampleInput: "Binary Tree",
    exampleOutput: "Preorder: [1, 2, 4, 5, 3, 6, 7], Inorder: [4, 2, 5, 1, 6, 3, 7], Postorder: [4, 5, 2, 6, 7, 3, 1]",
    explanation: "Traverse the tree in different orders."
},
{
    id: 71,
    title: "Find the Height of a Tree",
    description: "Calculate the height of a binary tree.",
    category: "Trees",
    difficulty: "Easy",
    exampleInput: "Binary Tree",
    exampleOutput: "Height = 3",
    explanation: "Use recursion to find the height of the tree."
},
{
    id: 72,
    title: "Check if a Tree is Balanced",
    description: "Determine if a binary tree is height-balanced.",
    category: "Trees",
    difficulty: "Medium",
    exampleInput: "Binary Tree",
    exampleOutput: "true/false",
    explanation: "A tree is balanced if the height difference of left and right subtrees is at most 1."
},
{
    id: 73,
    title: "Lowest Common Ancestor of Two Nodes",
    description: "Find the lowest common ancestor of two nodes in a binary tree.",
    category: "Trees",
    difficulty: "Medium",
    exampleInput: "Binary Tree, Nodes=4 and 6",
    exampleOutput: "LCA = 3",
    explanation: "Recursively find the split point where both nodes are in different subtrees."
},
{
    id: 74,
    title: "Find the Diameter of a Tree",
    description: "Find the longest path between any two nodes in a binary tree.",
    category: "Trees",
    difficulty: "Medium",
    exampleInput: "Binary Tree",
    exampleOutput: "Diameter = 4",
    explanation: "Use DFS to compute the longest path through the tree."
},
{
    id: 75,
    title: "Level Order Traversal",
    description: "Print the level order traversal of a binary tree.",
    category: "Trees",
    difficulty: "Medium",
    exampleInput: "Binary Tree",
    exampleOutput: "[[1], [2, 3], [4, 5, 6, 7]]",
    explanation: "Use a queue to traverse level by level."
},
{
    id: 76,
    title: "Construct a Tree from Preorder and Inorder",
    description: "Reconstruct a binary tree given its preorder and inorder traversals.",
    category: "Trees",
    difficulty: "Hard",
    exampleInput: "Preorder: [3,9,20,15,7], Inorder: [9,3,15,20,7]",
    exampleOutput: "Binary Tree",
    explanation: "Use recursion to build the tree using root positions."
},
{
    id: 77,
    title: "Find Kth Largest Element in a BST",
    description: "Find the kth largest element in a binary search tree.",
    category: "Trees",
    difficulty: "Hard",
    exampleInput: "BST, k=3",
    exampleOutput: "Largest Element = 8",
    explanation: "Use inorder traversal to find the kth largest."
},
{
    id: 78,
    title: "Serialize and Deserialize a Binary Tree",
    description: "Convert a binary tree to a string and reconstruct it.",
    category: "Trees",
    difficulty: "Hard",
    exampleInput: "Binary Tree",
    exampleOutput: "Serialized = '1,2,3,null,null,4,5'",
    explanation: "Use BFS or DFS for encoding and decoding."
},
{
    id: 79,
    title: "Binary Tree Maximum Path Sum",
    description: "Find the maximum path sum in a binary tree.",
    category: "Trees",
    difficulty: "Hard",
    exampleInput: "Binary Tree",
    exampleOutput: "Max Sum = 42",
    explanation: "Use DFS and keep track of the maximum sum."
}
,{
    id: 80,
    title: "Graph Representation (Adjacency List & Matrix)",
    description: "Implement a graph using adjacency list and adjacency matrix.",
    category: "Graphs",
    difficulty: "Easy",
    exampleInput: "Vertices = 4, Edges = [[0,1],[1,2],[2,3]]",
    exampleOutput: "Adjacency List: {0:[1],1:[0,2],2:[1,3],3:[2]}",
    explanation: "Store the graph as a list of edges or a 2D matrix."
},
{
    id: 81,
    title: "Breadth-First Search (BFS)",
    description: "Implement BFS traversal for a graph.",
    category: "Graphs",
    difficulty: "Easy",
    exampleInput: "Graph: {0:[1,2],1:[2],2:[0,3],3:[3]} Start=2",
    exampleOutput: "[2,0,3,1]",
    explanation: "Use a queue to visit all neighbors of a node before going deeper."
},
{
    id: 82,
    title: "Depth-First Search (DFS)",
    description: "Implement DFS traversal for a graph.",
    category: "Graphs",
    difficulty: "Easy",
    exampleInput: "Graph: {0:[1,2],1:[2],2:[0,3],3:[3]} Start=2",
    exampleOutput: "[2,0,1,3]",
    explanation: "Use recursion or a stack to explore deep paths first."
},
{
    id: 83,
    title: "Detect Cycle in an Undirected Graph",
    description: "Check if an undirected graph contains a cycle.",
    category: "Graphs",
    difficulty: "Medium",
    exampleInput: "Graph: {0:[1],1:[2],2:[0]}",
    exampleOutput: "true",
    explanation: "Use DFS with parent tracking to detect cycles."
},
{
    id: 84,
    title: "Topological Sorting",
    description: "Find a valid topological order of a Directed Acyclic Graph (DAG).",
    category: "Graphs",
    difficulty: "Medium",
    exampleInput: "Graph: {5:[2,0],4:[0,1],2:[3],3:[],1:[]}",
    exampleOutput: "[4,5,0,2,3,1]",
    explanation: "Use Kahn’s algorithm (BFS) or DFS with a stack."
},
{
    id: 85,
    title: "Dijkstra’s Algorithm",
    description: "Find the shortest path from a single source in a weighted graph.",
    category: "Graphs",
    difficulty: "Medium",
    exampleInput: "Graph: {0:[(1,4),(2,1)],1:[(3,1)],2:[(1,2),(3,5)]}, Start=0",
    exampleOutput: "[0,3,1,4]",
    explanation: "Use a priority queue (min-heap) to process shortest paths first."
},
{
    id: 86,
    title: "Floyd Warshall Algorithm",
    description: "Find the shortest paths between all pairs of vertices.",
    category: "Graphs",
    difficulty: "Hard",
    exampleInput: "Graph: [[0,3,INF,5],[2,0,INF,4],[INF,1,0,INF],[INF,INF,2,0]]",
    exampleOutput: "[[0,3,7,5],[2,0,6,4],[3,1,0,5],[5,3,2,0]]",
    explanation: "Use dynamic programming to compute all-pairs shortest paths."
},
{
    id: 87,
    title: "Prim’s Algorithm for Minimum Spanning Tree",
    description: "Find the minimum spanning tree (MST) using Prim’s algorithm.",
    category: "Graphs",
    difficulty: "Hard",
    exampleInput: "Graph: {0:[(1,10),(2,6),(3,5)],1:[(3,15)],2:[(3,4)]}",
    exampleOutput: "MST Weight: 19",
    explanation: "Use a priority queue to greedily add edges with the lowest weight."
},
{
    id: 88,
    title: "Kruskal’s Algorithm for Minimum Spanning Tree",
    description: "Find the minimum spanning tree (MST) using Kruskal’s algorithm.",
    category: "Graphs",
    difficulty: "Hard",
    exampleInput: "Graph: {0:[(1,10),(2,6),(3,5)],1:[(3,15)],2:[(3,4)]}",
    exampleOutput: "MST Weight: 19",
    explanation: "Sort edges by weight and use Union-Find to connect components."
},
{
    id: 89,
    title: "Bellman-Ford Algorithm",
    description: "Find the shortest path from a single source, even with negative weights.",
    category: "Graphs",
    difficulty: "Hard",
    exampleInput: "Graph: [[0,1,6],[0,2,7],[1,2,8],[1,3,-4],[2,3,9]] Start=0",
    exampleOutput: "[0,6,7,2]",
    explanation: "Iterate N-1 times, relaxing edges, to find the shortest path."
}
,
{
    id: 90,
    title: "Fibonacci Number Using DP",
    description: "Compute the nth Fibonacci number using dynamic programming.",
    category: "Dynamic Programming",
    difficulty: "Easy",
    exampleInput: "n=6",
    exampleOutput: "8",
    explanation: "Use memoization or tabulation to optimize recursive computation."
},
{
    id: 91,
    title: "Climbing Stairs",
    description: "Find the number of ways to reach the nth stair, taking 1 or 2 steps at a time.",
    category: "Dynamic Programming",
    difficulty: "Easy",
    exampleInput: "n=4",
    exampleOutput: "5",
    explanation: "Use Fibonacci logic: dp[n] = dp[n-1] + dp[n-2]."
},
{
    id: 92,
    title: "0/1 Knapsack Problem",
    description: "Find the maximum value that can be obtained by selecting items with given weights and values.",
    category: "Dynamic Programming",
    difficulty: "Medium",
    exampleInput: "Items: [(2,3),(3,4),(4,5)], Capacity=5",
    exampleOutput: "7",
    explanation: "Use a DP table to decide whether to include each item."
},
{
    id: 93,
    title: "Longest Increasing Subsequence",
    description: "Find the length of the longest increasing subsequence in an array.",
    category: "Dynamic Programming",
    difficulty: "Medium",
    exampleInput: "[10,9,2,5,3,7,101,18]",
    exampleOutput: "4",
    explanation: "Use DP to track the longest sequence ending at each index."
},
{
    id: 94,
    title: "Edit Distance",
    description: "Find the minimum number of operations required to convert one string to another.",
    category: "Dynamic Programming",
    difficulty: "Medium",
    exampleInput: "str1 = 'horse', str2 = 'ros'",
    exampleOutput: "3",
    explanation: "Use a DP table to track insertions, deletions, and replacements."
},
{
    id: 95,
    title: "Maximum Subarray (Kadane's Algorithm)",
    description: "Find the contiguous subarray with the largest sum.",
    category: "Dynamic Programming",
    difficulty: "Medium",
    exampleInput: "[-2,1,-3,4,-1,2,1,-5,4]",
    exampleOutput: "6",
    explanation: "Maintain a running sum and track the maximum encountered."
},
{
    id: 96,
    title: "Subset Sum Problem",
    description: "Check if there exists a subset with a given sum.",
    category: "Dynamic Programming",
    difficulty: "Hard",
    exampleInput: "Set: [3, 34, 4, 12, 5, 2], Sum=9",
    exampleOutput: "true",
    explanation: "Use a DP table to track subset sums."
},
{
    id: 97,
    title: "Egg Dropping Problem",
    description: "Find the minimum number of attempts needed to find the critical floor.",
    category: "Dynamic Programming",
    difficulty: "Hard",
    exampleInput: "Eggs=2, Floors=10",
    exampleOutput: "4",
    explanation: "Use DP to minimize worst-case attempts."
},
{
    id: 98,
    title: "Rod Cutting Problem",
    description: "Maximize the value obtained by cutting a rod into smaller pieces.",
    category: "Dynamic Programming",
    difficulty: "Hard",
    exampleInput: "Rod Length=8, Prices=[1,5,8,9,10,17,17,20]",
    exampleOutput: "22",
    explanation: "Use DP to explore all possible cuts."
},
{
    id: 99,
    title: "Travelling Salesman Problem",
    description: "Find the shortest route that visits all cities exactly once.",
    category: "Dynamic Programming",
    difficulty: "Hard",
    exampleInput: "Graph: Adjacency Matrix",
    exampleOutput: "Minimum cost path",
    explanation: "Use bitmasking DP to solve efficiently."
}
    
    // Continue with remaining categories...
];

// Exporting dataset
export default questions;

